name: Deploy

on: [push]

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1  # Your AWS region

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply
        run: terraform apply -auto-approve

  deploy-k8s:

    needs: terraform
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-north-1  # Set your AWS region here

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push Docker image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY_API: api  # Use your ECR repository name
        ECR_REPOSITORY_APP: app  # Use your ECR repository name
        IMAGE_TAG: latest
      run: |
        
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_API:$IMAGE_TAG -f ./docker/src/api/Dockerfile ./docker/src/api
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_API:$IMAGE_TAG
        
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_APP:$IMAGE_TAG -f ./docker/src/app/Dockerfile  ./docker/src/app
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_APP:$IMAGE_TAG

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name parkbee-cluster-v3 --region eu-north-1

    - name: Deploy to EKS
      run: |
        kubectl apply -f secrets.yaml
        kubectl apply -f k8s-deployment.yaml
        kubectl apply -f service-account.yaml
        
        kubectl rollout restart deployment/app-deployment -n myapp
        kubectl rollout restart deployment/api-deployment -n myapp

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: 'latest' # Specify the Helm version if needed, but 'latest' should default to Helm 3

    - name: Check Helm version
      run: helm version

    - name: Add Prometheus Helm repository
      run: helm repo add prometheus-community https://prometheus-community.github.io/helm-charts && helm repo update

    - name: Install Prometheus and Grafana
      run: helm install prometheus-release prometheus-community/kube-prometheus-stack
